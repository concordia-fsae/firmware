{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww30040\viewh16480\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 [*it is recommended to use LAZYGIT when doing git manipulation for visualisation*]\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97When Doing New Task\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\
	1.	Update master\
	\uc0\u8259 	git checkout master\
	\uc0\u8259 	git pull\
	2.	Create a branch\
	\uc0\u8259 	git checkout -b user/<your initials>/<branchname>\
	3.	Make changes onto branch\
	\uc0\u8259 	do thing...\
	4.	Commit git add . and git commit -m "Initial commit title"\
	5.	make more changes...\
	6.	git commit --amend\
	7.	If remote is already pushed, git push -f to force push\
	8.	Keep amending the last commit as long as its the same task and force pushing\
If you need to make a new branch, go back to step 1 and start over. New branch should only be for a new task\
\
\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97To verify if you amended correctly\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\
Git log [*make sure its not the same commit num*]\
					^\
	git add .			|\
	git commit --amend 		|\
	:wq				|\
					v\
Git log [*make sure its not the same commit num*]\
\
	git push --force\
\
\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97If there\'92s conflicts with your branch and master \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
(e.g. on master : file Abc has \'93zzz\'94 on line 1.        AND        on <branchName> : file Abc has \'93yyy\'94 on line 1.\
Do you want to keep both? Do you want only one to stay?)\
\
\uc0\u8232 [*make sure you commit before checkout master*]\u8232 [*if you forget to commit (or stash) your changes before you do that you will lose your changes*]\u8232 \
	1. Make sure you're on your feature branch\
	\uc0\u8259 	git checkout user/<your initials>/<branchname>\
\
	2. Fetch the latest changes from origin\
	\uc0\u8259 	git fetch origin\
\
\
[*git fetch origin is a Git command that:\
Downloads all latest changes from the remote repository (usually called origin) \'97 but does not apply them to your current branch.\
In detail:\
\'95	git fetch updates your local view of remote branches (like origin/master, origin/main, etc.)\
\'95	It doesn\'92t change your working directory, or any of your local branches.\
\'95	Think of it like syncing without applying.*]\
\
\
	3. Rebase your branch onto the latest master\
	\uc0\u8259 	git rebase origin/master \
\
	4. If there are conflicts, Git will pause and show them\
	\uc0\u8259 	Open each conflicted file and fix the conflict manually [* the use of VSCODE is recommended for visualisation*].\
	\uc0\u9642 	Go to vs code and press "accept combination (on top of code) if ur ok with both  OR accept only one change\
	\uc0\u8259 	Then mark it as resolved\
\
 	5. Continue the rebase after resolving conflicts\
	\uc0\u8259 	git rebase --continue\
\
	6. Repeat steps 4-5 until rebase is complete\
\
 	7. Now force push your updated branch\
	\uc0\u8259 	git push --force\
\
\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97If remote is different than local\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
(e.g XX commits ahead master/ XX behind master)\
\
\
https://graphite.dev/guides/git-divergent-branches\
\
\
\
}