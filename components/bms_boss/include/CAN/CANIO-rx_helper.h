/*
 * CANIO-rx_helper.c
 * CAN Receive Helper functions
 */


/******************************************************************************
 *                             I N C L U D E S
 ******************************************************************************/

#include "MessageUnpack_generated.h"

/******************************************************************************
 *                             t y p e d e f s
 ******************************************************************************/

// Should eventually be autogenerated (and efficient)
typedef enum
{
    CANRX_NODE_BMSW0 = 0U,
    CANRX_NODE_BMSW1,
    CANRX_NODE_BMSW2,
    CANRX_NODE_BMSW3,
    CANRX_NODE_BMSW4,
    CANRX_NODE_BMSW5,
    CANRX_NODE_BMSW_COUNT,
} CANRX_NODE_BMSW_E;

/******************************************************************************
 *                       P U B L I C  F U N C T I O N S
 ******************************************************************************/

// Should eventually be autogenerated (and efficient ie store arrays in CANRX)
__attribute__((unused))static inline uint8_t CANRX_VEH_get_BMSW_criticalDataCounter(CANRX_NODE_BMSW_E node)
{
    uint8_t ret = {0};
    switch (node)
    {
        case CANRX_NODE_BMSW0:
            return CANRX_VEH_get_BMSW0_criticalDataCounter();
            break;

        case CANRX_NODE_BMSW1:
            return CANRX_VEH_get_BMSW1_criticalDataCounter();
            break;

        case CANRX_NODE_BMSW2:
            return CANRX_VEH_get_BMSW2_criticalDataCounter();
            break;

        case CANRX_NODE_BMSW3:
            return CANRX_VEH_get_BMSW3_criticalDataCounter();
            break;

        case CANRX_NODE_BMSW4:
            return CANRX_VEH_get_BMSW4_criticalDataCounter();
            break;

        case CANRX_NODE_BMSW5:
            return CANRX_VEH_get_BMSW5_criticalDataCounter();
            break;

        default:
            // lint
            break;
    }

    return ret;
}

__attribute__((unused))static CAN_flag_E CANRX_VEH_get_BMSW_envFaultFlag(CANRX_NODE_BMSW_E node)
{
    CAN_flag_E ret = CAN_FLAG_CLEARED;
    switch (node)
    {
        case CANRX_NODE_BMSW0:
            return CANRX_VEH_get_BMSW0_envFaultFlag();
            break;

        case CANRX_NODE_BMSW1:
            return CANRX_VEH_get_BMSW1_envFaultFlag();
            break;

        case CANRX_NODE_BMSW2:
            return CANRX_VEH_get_BMSW2_envFaultFlag();
            break;

        case CANRX_NODE_BMSW3:
            return CANRX_VEH_get_BMSW3_envFaultFlag();
            break;

        case CANRX_NODE_BMSW4:
            return CANRX_VEH_get_BMSW4_envFaultFlag();
            break;

        case CANRX_NODE_BMSW5:
            return CANRX_VEH_get_BMSW5_envFaultFlag();
            break;

        default:
            // lint
            break;
    }

    return ret;
}

__attribute__((unused))static CAN_flag_E CANRX_VEH_get_BMSW_envErrorFlag(CANRX_NODE_BMSW_E node)
{
    CAN_flag_E ret = CAN_FLAG_CLEARED;
    switch (node)
    {
        case CANRX_NODE_BMSW0:
            return CANRX_VEH_get_BMSW0_envErrorFlag();
            break;

        case CANRX_NODE_BMSW1:
            return CANRX_VEH_get_BMSW1_envErrorFlag();
            break;

        case CANRX_NODE_BMSW2:
            return CANRX_VEH_get_BMSW2_envErrorFlag();
            break;

        case CANRX_NODE_BMSW3:
            return CANRX_VEH_get_BMSW3_envErrorFlag();
            break;

        case CANRX_NODE_BMSW4:
            return CANRX_VEH_get_BMSW4_envErrorFlag();
            break;

        case CANRX_NODE_BMSW5:
            return CANRX_VEH_get_BMSW5_envErrorFlag();
            break;

        default:
            // lint
            break;
    }

    return ret;
}

__attribute__((unused))static CAN_flag_E CANRX_VEH_get_BMSW_faultFlag(CANRX_NODE_BMSW_E node)
{
    CAN_flag_E ret = CAN_FLAG_CLEARED;
    switch (node)
    {
        case CANRX_NODE_BMSW0:
            return CANRX_VEH_get_BMSW0_faultFlag();
            break;

        case CANRX_NODE_BMSW1:
            return CANRX_VEH_get_BMSW1_faultFlag();
            break;

        case CANRX_NODE_BMSW2:
            return CANRX_VEH_get_BMSW2_faultFlag();
            break;

        case CANRX_NODE_BMSW3:
            return CANRX_VEH_get_BMSW3_faultFlag();
            break;

        case CANRX_NODE_BMSW4:
            return CANRX_VEH_get_BMSW4_faultFlag();
            break;

        case CANRX_NODE_BMSW5:
            return CANRX_VEH_get_BMSW5_faultFlag();
            break;

        default:
            // lint
            break;
    }

    return ret;
}

__attribute__((unused))static CAN_flag_E CANRX_VEH_get_BMSW_errorFlag(CANRX_NODE_BMSW_E node)
{
    CAN_flag_E ret = CAN_FLAG_CLEARED;
    switch (node)
    {
        case CANRX_NODE_BMSW0:
            return CANRX_VEH_get_BMSW0_errorFlag();
            break;

        case CANRX_NODE_BMSW1:
            return CANRX_VEH_get_BMSW1_errorFlag();
            break;

        case CANRX_NODE_BMSW2:
            return CANRX_VEH_get_BMSW2_errorFlag();
            break;

        case CANRX_NODE_BMSW3:
            return CANRX_VEH_get_BMSW3_errorFlag();
            break;

        case CANRX_NODE_BMSW4:
            return CANRX_VEH_get_BMSW4_errorFlag();
            break;

        case CANRX_NODE_BMSW5:
            return CANRX_VEH_get_BMSW5_errorFlag();
            break;

        default:
            // lint
            break;
    }

    return ret;
}

__attribute__((unused))static float32_t CANRX_VEH_get_BMSW_dischargeLimit(CANRX_NODE_BMSW_E node)
{
    float32_t ret = {0};
    switch (node)
    {
        case CANRX_NODE_BMSW0:
            return CANRX_VEH_get_BMSW0_dischargeLimit();
            break;

        case CANRX_NODE_BMSW1:
            return CANRX_VEH_get_BMSW1_dischargeLimit();
            break;

        case CANRX_NODE_BMSW2:
            return CANRX_VEH_get_BMSW2_dischargeLimit();
            break;

        case CANRX_NODE_BMSW3:
            return CANRX_VEH_get_BMSW3_dischargeLimit();
            break;

        case CANRX_NODE_BMSW4:
            return CANRX_VEH_get_BMSW4_dischargeLimit();
            break;

        case CANRX_NODE_BMSW5:
            return CANRX_VEH_get_BMSW5_dischargeLimit();
            break;

        default:
            // lint
            break;
    }

    return ret;
}

__attribute__((unused))static float32_t CANRX_VEH_get_BMSW_chargeLimit(CANRX_NODE_BMSW_E node)
{
    float32_t ret = {0};
    switch (node)
    {
        case CANRX_NODE_BMSW0:
            return CANRX_VEH_get_BMSW0_chargeLimit();
            break;

        case CANRX_NODE_BMSW1:
            return CANRX_VEH_get_BMSW1_chargeLimit();
            break;

        case CANRX_NODE_BMSW2:
            return CANRX_VEH_get_BMSW2_chargeLimit();
            break;

        case CANRX_NODE_BMSW3:
            return CANRX_VEH_get_BMSW3_chargeLimit();
            break;

        case CANRX_NODE_BMSW4:
            return CANRX_VEH_get_BMSW4_chargeLimit();
            break;

        case CANRX_NODE_BMSW5:
            return CANRX_VEH_get_BMSW5_chargeLimit();
            break;

        default:
            // lint
            break;
    }

    return ret;
}

__attribute__((unused))static float32_t CANRX_VEH_get_BMSW_tempMax(CANRX_NODE_BMSW_E node)
{
    float32_t ret = {0};
    switch (node)
    {
        case CANRX_NODE_BMSW0:
            return CANRX_VEH_get_BMSW0_tempMax();
            break;

        case CANRX_NODE_BMSW1:
            return CANRX_VEH_get_BMSW1_tempMax();
            break;

        case CANRX_NODE_BMSW2:
            return CANRX_VEH_get_BMSW2_tempMax();
            break;

        case CANRX_NODE_BMSW3:
            return CANRX_VEH_get_BMSW3_tempMax();
            break;

        case CANRX_NODE_BMSW4:
            return CANRX_VEH_get_BMSW4_tempMax();
            break;

        case CANRX_NODE_BMSW5:
            return CANRX_VEH_get_BMSW5_tempMax();
            break;

        default:
            // lint
            break;
    }

    return ret;
}

__attribute__((unused))static float32_t CANRX_VEH_get_BMSW_segmentVoltage(CANRX_NODE_BMSW_E node)
{
    float32_t ret = {0};
    switch (node)
    {
        case CANRX_NODE_BMSW0:
            return CANRX_VEH_get_BMSW0_segmentVoltage();
            break;

        case CANRX_NODE_BMSW1:
            return CANRX_VEH_get_BMSW1_segmentVoltage();
            break;

        case CANRX_NODE_BMSW2:
            return CANRX_VEH_get_BMSW2_segmentVoltage();
            break;

        case CANRX_NODE_BMSW3:
            return CANRX_VEH_get_BMSW3_segmentVoltage();
            break;

        case CANRX_NODE_BMSW4:
            return CANRX_VEH_get_BMSW4_segmentVoltage();
            break;

        case CANRX_NODE_BMSW5:
            return CANRX_VEH_get_BMSW5_segmentVoltage();
            break;

        default:
            // lint
            break;
    }

    return ret;
}

__attribute__((unused))static float32_t CANRX_VEH_get_BMSW_voltageMax(CANRX_NODE_BMSW_E node)
{
    float32_t ret = {0};
    switch (node)
    {
        case CANRX_NODE_BMSW0:
            return CANRX_VEH_get_BMSW0_voltageMax();
            break;

        case CANRX_NODE_BMSW1:
            return CANRX_VEH_get_BMSW1_voltageMax();
            break;

        case CANRX_NODE_BMSW2:
            return CANRX_VEH_get_BMSW2_voltageMax();
            break;

        case CANRX_NODE_BMSW3:
            return CANRX_VEH_get_BMSW3_voltageMax();
            break;

        case CANRX_NODE_BMSW4:
            return CANRX_VEH_get_BMSW4_voltageMax();
            break;

        case CANRX_NODE_BMSW5:
            return CANRX_VEH_get_BMSW5_voltageMax();
            break;

        default:
            // lint
            break;
    }

    return ret;
}

__attribute__((unused))static float32_t CANRX_VEH_get_BMSW_voltageMin(CANRX_NODE_BMSW_E node)
{
    float32_t ret = {0};
    switch (node)
    {
        case CANRX_NODE_BMSW0:
            return CANRX_VEH_get_BMSW0_voltageMin();
            break;

        case CANRX_NODE_BMSW1:
            return CANRX_VEH_get_BMSW1_voltageMin();
            break;

        case CANRX_NODE_BMSW2:
            return CANRX_VEH_get_BMSW2_voltageMin();
            break;

        case CANRX_NODE_BMSW3:
            return CANRX_VEH_get_BMSW3_voltageMin();
            break;

        case CANRX_NODE_BMSW4:
            return CANRX_VEH_get_BMSW4_voltageMin();
            break;

        case CANRX_NODE_BMSW5:
            return CANRX_VEH_get_BMSW5_voltageMin();
            break;

        default:
            // lint
            break;
    }

    return ret;
}

__attribute__((unused))static uint32_t CANRX_VEH_get_BMSW_voltageMin_timeSinceLastMessageMS(CANRX_NODE_BMSW_E node)
{
    uint32_t ret = {0};
    switch (node)
    {
        case CANRX_NODE_BMSW0:
            return CANRX_VEH_get_BMSW0_voltageMin_timeSinceLastMessageMS();
            break;

        case CANRX_NODE_BMSW1:
            return CANRX_VEH_get_BMSW1_voltageMin_timeSinceLastMessageMS();
            break;

        case CANRX_NODE_BMSW2:
            return CANRX_VEH_get_BMSW2_voltageMin_timeSinceLastMessageMS();
            break;

        case CANRX_NODE_BMSW3:
            return CANRX_VEH_get_BMSW3_voltageMin_timeSinceLastMessageMS();
            break;

        case CANRX_NODE_BMSW4:
            return CANRX_VEH_get_BMSW4_voltageMin_timeSinceLastMessageMS();
            break;

        case CANRX_NODE_BMSW5:
            return CANRX_VEH_get_BMSW5_voltageMin_timeSinceLastMessageMS();
            break;

        default:
            // lint
            break;
    }

    return ret;
}

__attribute__((unused))static CANRX_MESSAGE_health_E CANRX_VEH_get_BMSW_faultFlag_health(CANRX_NODE_BMSW_E node)
{
    CANRX_MESSAGE_health_E ret = {0};
    switch (node)
    {
        case CANRX_NODE_BMSW0:
            return CANRX_VEH_get_BMSW0_faultFlag_health();
            break;

        case CANRX_NODE_BMSW1:
            return CANRX_VEH_get_BMSW1_faultFlag_health();
            break;

        case CANRX_NODE_BMSW2:
            return CANRX_VEH_get_BMSW2_faultFlag_health();
            break;

        case CANRX_NODE_BMSW3:
            return CANRX_VEH_get_BMSW3_faultFlag_health();
            break;

        case CANRX_NODE_BMSW4:
            return CANRX_VEH_get_BMSW4_faultFlag_health();
            break;

        case CANRX_NODE_BMSW5:
            return CANRX_VEH_get_BMSW5_faultFlag_health();
            break;

        default:
            // lint
            break;
    }

    return ret;

}
