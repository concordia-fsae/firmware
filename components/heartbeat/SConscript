#!/usr/bin/python

from os.path import splitext

from SCons.Script import (
    AddOption,
    Default,
    Depends,
    Dir,
    Environment,
    File,
    GetOption,
    Import,
    Return,
)

Import("GlobalEnv")

# LIBS_DIR = Dir("#/embedded/libs")
SRC_DIR = Dir("src")
BUILD_DIR = Dir("build")

APP_START_ADDR = 0x08002000

env = GlobalEnv.Clone(tools=["gcc-arm-none-eabi", "st-flash", "openocd", "compilation_db"])

common_flags = [
    "-mthumb",
    "-mcpu=cortex-m3",
    "-Os",  # optimize for size
    # "-O0",
]
if not GetOption("release"):
    common_flags += ["-g3", "-ggdb3"]

link_flags = [
    "-Wl,--gc-sections",
    "-Wl,--relax",
    "-Wl,--print-memory-usage",
    f"-Wl,-Map={BUILD_DIR.File('heartbeat.map').path}",
    # "-Wl,--print-gc-sections",
    "--specs=nano.specs",
]

as_flags = [
    # tell the assembler to run the c preprocessor on assembly files
    "-xassembler-with-cpp",
    # "-Wa,-adhlns=$(BUILDDIR)/$(subst $(suffix $<),.lst,$<)"
]

c_flags = [
    "-std=gnu17",
    "-ffunction-sections",
    "-fdata-sections",
    "-fshort-enums",
    "-funsigned-char",
    # https://stackoverflow.com/questions/26300819/why-gcc-compiled-c-program-needs-eh-frame-section%20
    "-fno-asynchronous-unwind-tables",
    "-fverbose-asm",
    "-nostdlib",
    "-nostartfiles",
    "-msoft-float",
    "-Wall",
    "-Wcast-align",
    "-Werror",
    "-Wextra",
    "-Wfloat-equal",
    "-Wimplicit",
    "-Winit-self",
    "-Winline",
    "-Wlogical-op",
    "-Wmissing-prototypes",
    "-Wno-type-limits",
    "-Wno-unused-local-typedefs",
    "-Wpointer-arith",
    "-Wredundant-decls",
    "-Wreturn-type",
    "-Wshadow",
    "-Wunused",
]

inc_paths = [
    "include/",
]

env.Append(
    ASFLAGS=as_flags,
    CPPPATH=inc_paths,
    CCFLAGS=common_flags + c_flags,
    LINKSCRIPT=File("STM32F103C8.ld"),
    LINKFLAGS=link_flags + common_flags,
)


src_files = [
    SRC_DIR.File("main.c"),
    SRC_DIR.File("HW.c"),
    SRC_DIR.File("c_only_startup.S"),
    SRC_DIR.File("cortexm3_macro.S"),
]

objs = [
    env.Object(BUILD_DIR.File(splitext(src.name)[0] + ".obj"), src) for src in src_files
]

# link all the compiled objects into an elf
elf, map = env.Program(BUILD_DIR.File("heartbeat.elf"), objs)
env.Depends(elf, env["LINKSCRIPT"])

binary = env.Bin(source=elf)

# env for generarting the CRC
crc_env = Environment(tools=["hextools"])

# generate the CRCd binary
binary_crced = crc_env.InjectMpeg2CRC(source=binary, start_addr=APP_START_ADDR)
Default(binary_crced)


# asms target generates disassembled binaries
asms = env.Asm(source=objs + [elf])
env.Alias("asms", asms)


# build compilation database
compile_db = env.CompilationDatabase(BUILD_DIR.File("compile_commands.json"))
Depends(compile_db, objs)
# always generate compilation database
Default(compile_db)
# use compiledb alias to _only_ build the compiledb
env.Alias("compiledb", compile_db)

# Return artifacts to the caller
artifacts = {
    "FLASHABLE_ARTIFACT": {
        "artifact": binary_crced,
        "addr": APP_START_ADDR,
        "tools": ["st-flash"],
    },
    "DEBUG_ARTIFACT": {
        "artifact": elf,
        "args": [],
        "tools": ["gcc-arm-none-eabi", "openocd"],
        "env": {
            "OPENOCD_INTERFACE": "stlink",
            "OPENOCD_MCU": "stm32f103c8",
        },
    },
}

Return("artifacts")
