#!/usr/bin/python3

from typing import List, Optional, Tuple, Union

from SCons.Node import FS
from SCons.Script import Default, Depends, Dir, GetOption, Import, Return

Import("PLATFORM_ENV", "NETWORK_ENV")

SRC_DIR = Dir("src")
INC_DIR = Dir("include")
HW_DIR = SRC_DIR.Dir("HW")
RTOS_DIR = SRC_DIR.Dir("RTOS")

LIBS_DIR = Dir("#/embedded/libs")
FREERTOS_DIR = LIBS_DIR.Dir("FreeRTOS")
CMSIS_DIR = LIBS_DIR.Dir("CMSIS")
UDS_DIR = LIBS_DIR.Dir("uds")
ISOTP_DIR = LIBS_DIR.Dir("isotp")

ARTIFACT_NAME = "steering_wheel"
BUILD_DIR = PLATFORM_ENV["PLATFORM_ARTIFACTS"].Dir(f"{ARTIFACT_NAME.upper()}")

APP_START_ADDR = 0x08002000

env = PLATFORM_ENV.Clone(
    tools=["gcc-arm-none-eabi", "chip_config", "st-flash", "openocd", "compilation_db"],
    BUILD_DIR=BUILD_DIR,
)
rtos_env = PLATFORM_ENV.Clone(tools=["gcc-arm-none-eabi"])

env["OPENOCD_INTERFACE"] = "stlink"
env["OPENOCD_MCU"] = "stm32f103c8"


c_flags = [
    "-std=gnu17",
    "-mthumb",
    "-mcpu=cortex-m3",
    "-mfloat-abi=soft",
    "-msoft-float",
    "-nostdlib",
    "-nostartfiles",
    "--specs=nano.specs",
    "-ffunction-sections",
    "-fdata-sections",
    "-fshort-enums",
    "-funsigned-char",
    f"-DAPP_START_ADDR={APP_START_ADDR}",
    # "-DLD_USE_STACK",
    # "-DLD_USE_HEAP",
    "-DSTM32F1",
    "-DSTM32F103xB",
    "-DUSE_HAL_DRIVER",
    "-Wall",
    "-Wextra",
    "-Werror",
    "-Wfloat-equal",
    "-Wcast-align",
    "-Wlogical-op",
    "-Winline",
    "-Wshadow",
    "-Winit-self",
    "-Wmissing-prototypes",
    "-Wunused-function",
    "-Wpointer-arith",
    "-Wno-type-limits",
    "-Wno-unused-local-typedefs",
]

debug_flags = [
    "-ggdb3",
    "-g3",
    "-Og",
]

release_flags = [
    "-O2",
]

if GetOption("release"):
    c_flags += release_flags
else:
    c_flags += debug_flags

link_flags = [
    "-Wl,--gc-sections",
    # "-Wl,--print-gc-sections",
    "-Wl,--relax",
    "-Wl,--print-memory-usage",
]

as_flags = [
    # tell the assembler to run the c preprocessor on assembly files
    "-xassembler-with-cpp"
]

free_rtos_flags = [
    "-Wno-missing-prototypes",
    "-Wno-cast-align",
]

chip_config = env.ChipConfig(config_file=HW_DIR.File("mcuConfig.yaml"))
c_flags.extend(chip_config.get("defines", []))


RTOS_INCLUDE_DIRS = [
    INC_DIR.Dir("RTOS"),
    FREERTOS_DIR.Dir("Source/include/"),
    FREERTOS_DIR.Dir("Source/portable/GCC/ARM_CM3/"),
    CMSIS_DIR.Dir("CMSIS/Core/Include/"),
]

DRIVERS_INCLUDE_DIRS = [
    chip_config["cmsis_includes"],
    chip_config["hal_includes"],
]

LIBS_INCLUDE_DIRS = [
    LIBS_DIR.Dir("atomic"),
    LIBS_DIR.Dir("lib_FTDI_FT81x/include"),
    LIBS_DIR.Dir("printf/src"),
    LIBS_DIR.Dir("printf/src/printf"),
    UDS_DIR.Dir("include"),
    ISOTP_DIR.Dir("include"),
]

PROJECT_INCLUDE_DIRS = [
    INC_DIR,
    INC_DIR.Dir("HW"),
    Dir("generated/"),
]

paths = (
    RTOS_INCLUDE_DIRS + DRIVERS_INCLUDE_DIRS + PROJECT_INCLUDE_DIRS + LIBS_INCLUDE_DIRS
)

env.Append(
    ASFLAGS=as_flags,
    CPPPATH=paths,
    CCFLAGS=c_flags,
    LINKSCRIPT=chip_config["linker_file"],
    LINKFLAGS=c_flags + link_flags,
    MAPFILE=BUILD_DIR.File("steering_wheel.map"),
)

uds_env = env.Clone()
uds_env.Append(
    CCFLAGS=[
        "-Wno-missing-prototypes",
        "-Wno-unused-parameter",
        "-DBYTE_ORDER=_BYTE_ORDER",
        "-DLITTLE_ENDIAN=_LITTLE_ENDIAN",
        "-Wno-inline",
    ]
)

rtos_env.Append(
    CPPPATH=paths,
    CCFLAGS=c_flags + free_rtos_flags,
)

# List of component C files

src_files = [
    SRC_DIR.File("SystemManager.c"),
    SRC_DIR.File("Module.c"),
    SRC_DIR.File("CAN/CANIO-tx.c"),
    SRC_DIR.File("CAN/CANIO-rx.c"),
    SRC_DIR.File("IO.c"),
    SRC_DIR.File("Screen.c"),
    SRC_DIR.File("Display/Pills.c"),
    SRC_DIR.File("Display/Dots.c"),
    SRC_DIR.File("UDS.c"),
    HW_DIR.File("HW_adc.c"),
    HW_DIR.File("HW_can.c"),
    HW_DIR.File("HW_dma.c"),
    HW_DIR.File("HW_gpio.c"),
    HW_DIR.File("HW_intc.c"),
    HW_DIR.File("HW_msp.c"),
    HW_DIR.File("HW_spi.c"),
    HW_DIR.File("HW_timebase.c"),
]

ftdi_lib_files = [
    (LIBS_DIR.File("lib_FTDI_FT81x/src/EVE_commands.c"), ["-Wno-inline"]),
    (LIBS_DIR.File("lib_FTDI_FT81x/src/EVE_target.c"), ["-Wno-inline"]),
]

src_files += ftdi_lib_files

rtos_src_files = [
    RTOS_DIR.File("FreeRTOSResources.c"),
    RTOS_DIR.File("FreeRTOS_SWI.c"),
    FREERTOS_DIR.File("Source/croutine.c"),
    FREERTOS_DIR.File("Source/event_groups.c"),
    FREERTOS_DIR.File("Source/list.c"),
    FREERTOS_DIR.File("Source/queue.c"),
    FREERTOS_DIR.File("Source/tasks.c"),
    FREERTOS_DIR.File("Source/timers.c"),
    FREERTOS_DIR.File("Source/portable/GCC/ARM_CM3/port.c"),
    # FREERTOS_DIR.File("Source/stream_buffer.c"),
    # FREERTOS_DIR.File("Source/portable/MemMang/heap_4.c"),
]

platform_source_files = [
    (
        LIBS_DIR.File("printf/src/printf/printf.c"),
        ["-DPRINTF_INCLUDE_CONFIG_H=1", "-Wno-float-equal", "-Wno-inline"],
    ),
]

# add driver source files
platform_source_files.extend(
    [(src[0], src[1] + ["-Wno-inline"]) for src in chip_config["sources"]]
)

uds_srcs = [
    ISOTP_DIR.File("isotp.c"),
    UDS_DIR.File("src/udsServer.c"),
]


def create_output_file_path(
    file: FS.File, new_ext: str, target_dir: Optional[str] = None
) -> str:
    fn = file.target_from_source(prefix="", suffix=new_ext).name

    if target_dir:
        return BUILD_DIR.Dir(target_dir).File(fn)

    return BUILD_DIR.Dir("/".join(file.path.split("/")[2:-1]) + "/").File(fn)


def compile_objects(
    env,
    files: List[Union[FS.File, Tuple[FS.File, List[str]]]],
    target_dir: Optional[str] = None,
) -> List[FS.File]:
    objs = []
    flags = env["CCFLAGS"]
    for src in files:
        if isinstance(src, tuple):
            src_file = src[0]
            these_flags = flags + src[1]
        elif isinstance(src, FS.File):
            src_file = src
            these_flags = flags
        else:
            raise Exception(
                "Source file should either be a 'File' \
                object or a tuple of a 'File' and a list of extra flags to compile with"
            )

        target = create_output_file_path(src_file, ".obj", target_dir)
        objs.append(env.Object(target=target, source=src_file, CCFLAGS=these_flags))
    return objs

generated_dir = BUILD_DIR.Dir("generated")
NETWORK_ENV.GenerateNodes({ f"stw": generated_dir, })

## actually compile stuff

objs = []  # store objects here

# compile platform files
objs.extend(compile_objects(env, platform_source_files, target_dir="embedded/"))

# compile rtos source files
objs.extend(compile_objects(rtos_env, rtos_src_files, target_dir="FreeRTOS/"))

# compile project source files
objs.extend(compile_objects(env, src_files))

# compile UDS source files
objs.extend(compile_objects(uds_env, uds_srcs, target_dir="uds/"))

# link all the compiled objects into an elf
elf, map = env.Program(BUILD_DIR.File("steering_wheel.elf"), objs)
Depends(elf, env["LINKSCRIPT"])

# generate a binary for flashing
binary = env.Bin(source=elf)

# asms target generates disassembled binaries
asms = env.Asm(source=objs + [elf])
env.Alias("asms", asms)

# env for generarting the CRC
crc_env = PLATFORM_ENV.Clone(tools=["hextools"])

# generate the CRCd binary
binary_crced = crc_env.InjectMpeg2CRC(source=binary, start_addr=APP_START_ADDR)
Default(binary_crced)

# Generate compile_commands.json
compile_db = env.CompilationDatabase(BUILD_DIR.File("compile_commands.json"))
Depends(compile_db, objs)
# generate it by default
Default(compile_db)
# add an alias to _only_ generate the compilation database
env.Alias("compiledb", compile_db)

# Return artifacts to the caller
artifacts = {
    "FLASHABLE_ARTIFACT": {
        "artifact": binary_crced,
        "addr": APP_START_ADDR,
        "tools": ["st-flash"],
    },
    "DEBUG_ARTIFACT": {
        "artifact": elf,
        "args": [],
        "tools": ["gcc-arm-none-eabi", "openocd"],
        "env": {
            "OPENOCD_INTERFACE": "stlink",
            "OPENOCD_MCU": "stm32f103c8",
        },
    },
}

Return("artifacts")
