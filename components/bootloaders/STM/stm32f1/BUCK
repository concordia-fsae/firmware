load("@toolchains//gcc/defs.bzl", "generate_asms", "generate_stripped_asms")
load("//drive-stack/conUDS/defs.bzl", "conUDS_bootloader_download", "conUDS_download")
load("//tools/hextools/defs.bzl", "inject_crc")
load(":defs.bzl", "BootloaderVariant", "SupportedMicrocontrollers", "bootloader")

TOOLCHAIN = "@toolchains//:gcc-14.2.rel1-arm-none-eabi"

variants = [
    BootloaderVariant(name = "bmsw", config_id = 0, has_updater = True, target = SupportedMicrocontrollers("f103")),
    BootloaderVariant(name = "bmsw", config_id = 1, has_updater = True, target = SupportedMicrocontrollers("f103")),
    BootloaderVariant(name = "bmsw", config_id = 2, has_updater = True, target = SupportedMicrocontrollers("f103")),
    BootloaderVariant(name = "bmsw", config_id = 3, has_updater = True, target = SupportedMicrocontrollers("f103")),
    BootloaderVariant(name = "bmsw", config_id = 4, has_updater = True, target = SupportedMicrocontrollers("f103")),
    BootloaderVariant(name = "bmsw", config_id = 5, has_updater = True, target = SupportedMicrocontrollers("f103")),
    BootloaderVariant(name = "bmsb", config_id = 10, has_updater = True, target = SupportedMicrocontrollers("f103")),
    BootloaderVariant(name = "bmsb", config_id = 11, has_updater = True, target = SupportedMicrocontrollers("f105")),
    BootloaderVariant(name = "stw", config_id = 20, has_updater = False, target = SupportedMicrocontrollers("f103")),
    BootloaderVariant(name = "sws", config_id = 21, has_updater = False, target = SupportedMicrocontrollers("f103")),
    BootloaderVariant(name = "vcfront", config_id = 30, has_updater = True, target = SupportedMicrocontrollers("f105")),
    BootloaderVariant(name = "vcrear", config_id = 31, has_updater = True, target = SupportedMicrocontrollers("f105")),
    BootloaderVariant(name = "vcpdu", config_id = 32, has_updater = True, target = SupportedMicrocontrollers("f105")),
    BootloaderVariant(name = "debug", config_id = 100, has_updater = False, target = SupportedMicrocontrollers("f103")),
]

compiler_flags = [
    "-std=gnu17",
    "-mthumb",
    "-mcpu=cortex-m3",
    "-mfloat-abi=soft",
    "-msoft-float",
    # "-nostdlib", # this actually _increases_ flash usage, somehow
    "-nostartfiles",
    "--specs=nano.specs",
    "-Os",  # optimize for size
    "-ffunction-sections",
    "-fdata-sections",
    "-fshort-enums",
    "-funsigned-char",
    # https://stackoverflow.com/questions/26300819/why-gcc-compiled-c-program-needs-eh-frame-section%20
    "-fno-asynchronous-unwind-tables",
    "-Wall",
    "-Wcast-align",
    "-Werror",
    "-Wextra",
    "-Wfloat-equal",
    "-Wimplicit",
    "-Winit-self",
    "-Winline",
    "-Wlogical-op",
    "-Wmissing-prototypes",
    "-Wno-type-limits",
    "-Wno-unused-local-typedefs",
    "-Wpointer-arith",
    "-Wredundant-decls",
    "-Wreturn-type",
    "-Wshadow",
    "-Wunused",
    "-Wundef",
]

linker_flags = [
    "-Wl,--gc-sections",
    # "--print-gc-sections",
    "-Wl,--relax",
    "-Wl,--print-memory-usage",
    "-Wl,--stats",
]

[
    bootloader(
        variant = variant,
        toolchain = TOOLCHAIN,
        compiler_flags = compiler_flags,
        linker_flags = linker_flags,
    )
    for variant in variants
]
