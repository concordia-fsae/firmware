load("@toolchains//gcc/defs.bzl", "generate_asms", "generate_stripped_asms")
load("//tools/hextools/defs.bzl", "inject_crc")
load("//components/shared/code/defs.bzl", "shared_code_library", "remap_headers")
load("//tools/feature-tree/defs.bzl", "generate_feature_tree")
load("//drive-stack/conUDS/defs.bzl", "conUDS_download", "conUDS_bootloader_download")

TOOLCHAIN = "@toolchains//:gcc-14.2.rel1-arm-none"
APP_START_ADDR = 0x08000000
UPDATER_OFFSET_ADDR = 0x2000
APP_NAME = "bl"

variants = [
    ("bmsw0", 0, True, [":f103"]), # BMSW
    ("bmsw1", 1, True, [":f103"]), # BMSW
    ("bmsw2", 2, True, [":f103"]), # BMSW
    ("bmsw3", 3, True, [":f103"]), # BMSW
    ("bmsw4", 4, True, [":f103"]), # BMSW
    ("bmsw5", 5, True, [":f103"]), # BMSW
    ("bmsb", 10, True, [":f103"]), # BMSB
    ("bmsb", 11, True, [":f105"]), # BMSB
    ("stw", 20, False, [":f103"]), # STW
    ("sws", 21, False, [":f103"]), # SWS
    ("vcfront", 30, True, [":f105"]), # VCFRONT
    ("vcrear", 31, True, [":f105"]), # VCREAR
    ("vcpdu", 32, True, [":f105"]), # VCPDU
    ("", 100, False, [":f103"]), # DEBUG
]

constraint_setting(
    name = "mcu",
)
[
    constraint_value(
        name = mcu,
        constraint_setting = ":mcu",
    )
    for mcu in [ "f103", "f105" ]
]
constraint_setting(
    name = "type",
)
[
    constraint_value(
        name = app,
        constraint_setting = ":type",
    )
    for app in [ "app", "updater" ]
]

constraint_setting(
    name = "variant",
)
[
    constraint_value(
        name = "config-{}".format(variant),
        constraint_setting = ":variant",
    )
    for _, variant, _, _ in variants
]
[
    constraint_value(
        name = "config-updater-{}".format(variant),
        constraint_setting = ":variant",
    )
    for _, variant, has_updater, _ in variants if has_updater
]

[
    platform(
        name = "platform-{}".format(variant),
        constraint_values = [
            ":config-{}".format(variant),
            ":app",
        ] + extra_constraints,
    )
    for _, variant, _, extra_constraints in variants
]
[
    platform(
        name = "platform-updater-{}".format(variant),
        constraint_values = [
            ":config-updater-{}".format(variant),
            ":updater",
        ] + extra_constraints,
    )
    for _, variant, has_updater, extra_constraints in variants if has_updater
]

compiler_flags = [
    "-std=gnu17",
    "-mthumb",
    "-mcpu=cortex-m3",
    "-mfloat-abi=soft",
    "-msoft-float",
    # "-nostdlib", # this actually _increases_ flash usage, somehow
    "-nostartfiles",
    "--specs=nano.specs",
    "-Os",  # optimize for size
    "-ffunction-sections",
    "-fdata-sections",
    "-fshort-enums",
    "-funsigned-char",
    # https://stackoverflow.com/questions/26300819/why-gcc-compiled-c-program-needs-eh-frame-section%20
    "-fno-asynchronous-unwind-tables",
    "-Wall",
    "-Wcast-align",
    "-Werror",
    "-Wextra",
    "-Wfloat-equal",
    "-Wimplicit",
    "-Winit-self",
    "-Winline",
    "-Wlogical-op",
    "-Wmissing-prototypes",
    "-Wno-type-limits",
    "-Wno-unused-local-typedefs",
    "-Wpointer-arith",
    "-Wredundant-decls",
    "-Wreturn-type",
    "-Wshadow",
    "-Wunused",
    "-Wundef",
]

linker_flags = [
    "-Wl,--gc-sections",
    # "--print-gc-sections",
    "-Wl,--relax",
    "-Wl,--print-memory-usage",
    "-Wl,--stats",
]

[
    generate_feature_tree(
        name = "feature-tree-{}".format(v),
        config_id = v,
        build_renderer = "renderers/BuildDefines_generated.h.mako.buck2",
        srcs = {
            "variants.yaml": "variants.yaml",
            "STM32F103xB_FeatureSels.yaml": "//components/shared:FeatureSels/STM32F103xB_FeatureSels.yaml",
            "Controller_FeatureDefs.yaml": "//components/shared:FeatureDefs/Controller_FeatureDefs.yaml",
            "BOOT_V1_FeatureSels.yaml": "//components/shared:FeatureSels/BOOT_V1_FeatureSels.yaml",
            "Application_FeatureDefs.yaml": "//components/shared:FeatureDefs/Application_FeatureDefs.yaml",
            "FeatureDefs.yaml": "FeatureDefs.yaml",
            "FeatureSels.yaml": "FeatureSels.yaml",
        },
        kv = {
            APP_NAME + "_config_id": "{}U".format(v),
        },
    )
    for _, v, _, _ in variants
]
[
    generate_feature_tree(
        name = "feature-tree-updater-{}".format(v),
        config_id = v + 1000,
        build_renderer = "renderers/BuildDefines_generated.h.mako.buck2",
        srcs = {
            "variants.yaml": "variants.yaml",
            "STM32F103xB_FeatureSels.yaml": "//components/shared:FeatureSels/STM32F103xB_FeatureSels.yaml",
            "Controller_FeatureDefs.yaml": "//components/shared:FeatureDefs/Controller_FeatureDefs.yaml",
            "BOOTUPDATER_V1_FeatureSels.yaml": "//components/shared:FeatureSels/BOOTUPDATER_V1_FeatureSels.yaml",
            "Application_FeatureDefs.yaml": "//components/shared:FeatureDefs/Application_FeatureDefs.yaml",
            "FeatureDefs.yaml": "FeatureDefs.yaml",
            "FeatureSels.yaml": "FeatureSels.yaml",
        },
        kv = {
            APP_NAME + "_config_id": "{}U".format(v + 1000),
        },
    )
    for _, v, has_updater, _ in variants if has_updater
]

alias(
    name = "feature-tree",
    actual = select(
        { ":config-{}".format(variant): ":feature-tree-{}".format(variant) for _, variant, _, _ in variants } |
        { ":config-updater-{}".format(variant): ":feature-tree-updater-{}".format(variant)
            for _, variant, has_updater, _ in variants if has_updater
        }
    )
)

prebuilt_cxx_library(
    name = "build-headers",
    header_only = True,
    header_namespace = "",
    exported_headers = {
        "BuildDefines.h": "include/HW/BuildDefines.h",
    } | remap_headers(["include/HW/"]) | remap_headers(["include/"]),
    exported_deps = [":feature-tree"],
)

compiler_flags += ["-include", "BuildDefines.h"]

cxx_library(
    name = "udsServer",
    _cxx_toolchain = TOOLCHAIN,
    compiler_flags = compiler_flags + [
        "-Wno-missing-prototypes",
        "-Wno-unused-parameter",
        "-DBYTE_ORDER=_BYTE_ORDER",
        "-DLITTLE_ENDIAN=_LITTLE_ENDIAN",
        "-Wno-inline",
        "-Wno-conversion",
    ],
    srcs = [
        "//embedded/libs:isotp[isotp.c]",
        "//embedded/libs/uds:lib_udsServer.c",
    ],
    header_namespace = "",
    exported_headers = {
        "lib_uds.h": "//embedded/libs/uds:lib_uds.h",
    },
    deps = [
        ":build-headers",
        "//components/shared/code:headers",
    ],
    headers = {
        "uds_componentSpecific.h": "include/uds_componentSpecific.h",
        "isotp.h": "//embedded/libs:isotp[include/isotp.h]",
        "isotp_config.h": "//embedded/libs:isotp[include/isotp_config.h]",
        "isotp_defines.h": "//embedded/libs:isotp[include/isotp_defines.h]",
        "isotp_user.h": "//embedded/libs:isotp[include/isotp_user.h]",
    },
)

[
    cxx_genrule(
        name = "linkscript-" + variant,
        _cxx_toolchain = TOOLCHAIN,
        cmd = "set -o pipefail && $(cpp) -P -undef {}".format(" ".join(compiler_flags)) +
            " -include BuildDefines.h linkscript | sed -e '/^#.\\+$/d' > ${OUT}",
        out = "linkscript",
        srcs = {
            "linkscript": "STM32F1.ld",
            "BuildDefines.h": "include/HW/BuildDefines.h",
            "FeatureDefines.h": "//tools/feature-tree:FeatureDefines.h",
            "BuildDefines_generated.h": select({
                ":config-{}".format(variant): ":BuildDefines_generated.h.config-{}".format(variant) for _, variant, _, _ in variants
            } | {
                ":config-updater-{}".format(variant): ":BuildDefines_generated.h.config-{}".format(variant + 1000) for _, variant, has_variants, _ in variants if has_variants
            }),
            "FeatureDefines_generated.h": select({
                ":config-{}".format(variant): ":FeatureDefines_generated.h.config-{}".format(variant) for _, variant, _, _ in variants
            } | {
                ":config-updater-{}".format(variant): ":FeatureDefines_generated.h.config-{}".format(variant + 1000) for _, variant, has_variants, _ in variants if has_variants
            }),
        },
    )
    for variant, script in [
        ("f103", "stm32f103c8.ld"),
        ("f105", "stm32f105.ld"),
    ]
]
alias(
    name = "linkscript",
    actual = select({
        ":f103": ":linkscript-f103",
        ":f105": ":linkscript-f105",
    })
)

component_headers = remap_headers(["include/", "include/HW/"])

cxx_binary(
    name = "elf",
    _cxx_toolchain = TOOLCHAIN,
    compiler_flags = compiler_flags,
    linker_flags = compiler_flags + linker_flags + ["-T", "$(location :linkscript)"],
    executable_name = APP_NAME + ".elf",
    srcs = 
        glob(["src/**/*.c", "src/**/*.S"]) + [
        "//embedded/libs:libcrc.c",
        "//components/shared/code:libs/LIB_app.c",
    ],
    header_namespace = "",
    headers = {
        "lib_atomic.h": "//embedded/libs:lib_atomic.h",
        "libcrc.h": "//embedded/libs:libcrc.h",
    } | component_headers,
    include_directories = [
        "include/",
        "include/HW/",
    ],
    deps = [
        ":udsServer",
        ":build-headers",
        "//components/shared/code:headers",
        "//embedded/libs/cells:cells",
    ],
)

generate_asms(
    name = "asm",
    binary = ":elf",
)

generate_stripped_asms(
    name = "asms",
    targets = [
        ":elf",
        ":udsServer",
    ],
    toolchain = TOOLCHAIN,
)

[
    cxx_genrule(
        name = "bin-{}".format(variant),
        _cxx_toolchain = TOOLCHAIN,
        srcs = [":elf"],
        out = APP_NAME + "-{}.bin".format(variant),
        cmd = "$(objcopy) -O binary ${SRCS} ${OUT}",
    )
    for _, variant, _, _ in variants
]
[
    cxx_genrule(
        name = "bin-updater-{}".format(variant),
        _cxx_toolchain = TOOLCHAIN,
        srcs = [":elf"],
        out = APP_NAME + "-updater-{}.bin".format(variant),
        cmd = "$(objcopy) -O binary ${SRCS} ${OUT}",
    )
    for _, variant, has_updater, _ in variants if has_updater
]

[
    inject_crc(
        name = "bin_crc-{}".format(variant),
        binary = ":bin-{}".format(variant),
        output = APP_NAME + "_crc-{}.bin".format(variant),
        start_address = APP_START_ADDR,
    )
    for _, variant, _, _ in variants
]
[
    inject_crc(
        name = "bin_crc-updater-{}".format(variant),
        binary = ":bin-updater-{}".format(variant),
        output = APP_NAME + "_crc-updater-{}.bin".format(variant),
        start_address = APP_START_ADDR + UPDATER_OFFSET_ADDR
    )
    for _, variant, has_variants, _ in variants if has_variants
]
[
    configured_alias(
        name = "crc-{}".format(i),
        actual = ":bin_crc-{}".format(i),
        platform = ":platform-{}".format(i),
        visibility = ["PUBLIC"],
    )
    for _, i, _, _ in variants
]
[
    configured_alias(
        name = "crc-updater-{}".format(i),
        actual = ":bin_crc-updater-{}".format(i),
        platform = ":platform-updater-{}".format(i),
        visibility = ["PUBLIC"],
    )
    for _, i, has_updater, _ in variants if has_updater
]

filegroup(
    name = "crc.all_nodes",
    srcs = [
        ":crc-{}".format(variant) for _, variant, _, _ in variants ] + [
        ":crc-updater-{}".format(variant) for _, variant, has_updater, _ in variants if has_updater
    ],
)

alias(
    name = "compdb",
    actual = ":elf[full-compilation-database]",
)

alias(
    name = APP_NAME,
    actual = ":bin",
)

[
    conUDS_download(
        name = "download-updater-{}".format(variant),
        binary = ":crc-updater-{}".format(variant),
        manifest = "//network:manifest-uds",
        node = node,
    )
    for node, variant, _, _ in variants
]
[
    conUDS_bootloader_download(
        name = "download-bootloader-{}".format(variant),
        binary = ":crc-{}".format(variant),
        manifest = "//network:manifest-uds",
        node = node,
    )
    for node, variant, has_updater, _ in variants if has_updater
]
