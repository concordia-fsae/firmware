/*
 * HW_pinmux.h
 * PCB-specific GPIO configuration file. Will probably be autogenerated
 * eventually based on build config ID
 */

#pragma once

/******************************************************************************
 *                             I N C L U D E S
 ******************************************************************************/

#include "BuildDefines_generated.h"
#include "HW.h"


/******************************************************************************
 *                           P U B L I C  V A R S
 ******************************************************************************/

const GPIO_config_S pinmux [] = {
    // CAN pin settings
    { .port = CAN_TX_PORT,    .pin = CAN_TX_PIN,    .alternate_function = true,  .mode = GPIO_MODE_OUTPUT_HIGH_SPEED, .config = GPIO_CFG_OUTPUT_PUSH_PULL,},
    { .port = CAN_RX_PORT,    .pin = CAN_RX_PIN,    .alternate_function = false, .mode = GPIO_MODE_INPUT,             .config = GPIO_CFG_INPUT_FLOATING,},
    // other pin settings
    { .port = BUTTON_PORT,    .pin = BUTTON_PIN,    .alternate_function = false, .mode = GPIO_MODE_INPUT,             .config = GPIO_CFG_INPUT_FLOATING,},
    { .port = LED_PORT,       .pin = LED_PIN,       .alternate_function = false, .mode = GPIO_MODE_OUTPUT_LOW_SPEED,  .config = LED_MODE,},
#if CAN_SLEEP
    { .port = CAN_SLEEP_PORT, .pin = CAN_SLEEP_PIN, .alternate_function = false, .mode = GPIO_MODE_OUTPUT_LOW_SPEED,  .config = GPIO_CFG_OUTPUT_OPEN_DRAIN,},
#endif
#if (APP_COMPONENT_ID == FDEFS_COMPONENT_ID_VCPDU)
#if (APP_PCBA_ID == 0U)
    { .port = CARCOMP_CONTROL_EN_PORT, .pin = CARCOMP_CONTROL_EN, .alternate_function = false, .mode = GPIO_MODE_OUTPUT_LOW_SPEED,  .config = GPIO_CFG_OUTPUT_PUSH_PULL,},
    { .port = POE_PORT, .pin = POE_EN, .alternate_function = false, .mode = GPIO_MODE_OUTPUT_LOW_SPEED,  .config = GPIO_CFG_OUTPUT_PUSH_PULL,},
#else
#error "Unsupported VCPDU variant"
#endif
#endif
};
