#!/usr/bin/python

from os import makedirs
from typing import List

from mako.template import Template
import SCons
from SCons.Script import (
    Alias,
    Clean,
    Depends,
    Default,
    Dir,
    File,
    GetOption,
    Environment,
    Import,
    Return,
)

Import("PLATFORM_ENV", "CONFIG_IDS")

PROJECT_DIR = Dir(".")
SRC_DIR = Dir("src")
LIBS_DIR = Dir("#/embedded/libs")
UDS_DIR = LIBS_DIR.Dir("uds")
ISOTP_DIR = LIBS_DIR.Dir("isotp")
SHARED_CODE = Dir("#/components/shared/code")
SHARED_LIBS = SHARED_CODE.Dir("libs")

ARTIFACT_NAME = "bootloader"
BUILDS_DIR = Dir(f"build")

APP_START_ADDR = 0x08000000

env = PLATFORM_ENV.Clone(
    tools=["gcc-arm-none-eabi", "st-flash", "openocd", "compilation_db", "variants"]
)

c_flags = [
    "-std=gnu17",
    "-mthumb",
    "-mcpu=cortex-m3",
    "-mfloat-abi=soft",
    "-msoft-float",
    # "-nostdlib", # this actually _increases_ flash usage, somehow
    "-nostartfiles",
    "--specs=nano.specs",
    "-Os",  # optimize for size
    "-ffunction-sections",
    "-fdata-sections",
    "-fshort-enums",
    "-funsigned-char",
    # https://stackoverflow.com/questions/26300819/why-gcc-compiled-c-program-needs-eh-frame-section%20
    "-fno-asynchronous-unwind-tables",
    "-Wall",
    "-Wcast-align",
    "-Werror",
    "-Wextra",
    "-Wfloat-equal",
    "-Wimplicit",
    "-Winit-self",
    "-Winline",
    "-Wlogical-op",
    "-Wmissing-prototypes",
    "-Wno-type-limits",
    "-Wno-unused-local-typedefs",
    "-Wpointer-arith",
    "-Wredundant-decls",
    "-Wreturn-type",
    "-Wshadow",
    "-Wunused",
    "-Wundef",
]

if not GetOption("release"):
    c_flags += ["-g3", "-ggdb3"]

link_flags = [
    "-Wl,--gc-sections",
    # "-Wl,--print-gc-sections",
    "-Wl,--relax",
    "-Wl,--print-memory-usage",
]

as_flags = [
    # tell the assembler to run the c preprocessor on assembly files
    "-xassembler-with-cpp",
    # "-Wa,-adhlns=$(BUILDDIR)/$(subst $(suffix $<),.lst,$<)"
]

inc_paths = [
    PROJECT_DIR.Dir("include/"),
    PROJECT_DIR.Dir("include/HW"),
    UDS_DIR.Dir("include"),
    ISOTP_DIR.Dir("include"),
    LIBS_DIR.Dir("libcrc"),
    SHARED_LIBS,
]

src_files = [
    SRC_DIR.File("main.c"),
    SRC_DIR.File("CAN.c"),
    SRC_DIR.File("UDS.c"),
    SRC_DIR.File("HW/HW.c"),
    SRC_DIR.File("HW/HW_CAN.c"),
    SRC_DIR.File("HW/HW_CLK.c"),
    SRC_DIR.File("HW/HW_CRC.c"),
    SRC_DIR.File("HW/HW_FLASH.c"),
    SRC_DIR.File("HW/HW_GPIO.c"),
    SRC_DIR.File("HW/HW_NVIC.c"),
    SRC_DIR.File("HW/HW_SYS.c"),
    SRC_DIR.File("HW/HW_TIM.c"),
    SRC_DIR.File("c_only_startup.S"),
    SRC_DIR.File("cortexm3_macro.S"),
    SHARED_LIBS.File("LIB_app.c"),
]

uds_srcs = [
    ISOTP_DIR.File("isotp.c"),
    UDS_DIR.File("src/udsServer.c"),
    LIBS_DIR.File("libcrc/libcrc.c"),
]

env.Append(
    ASFLAGS=as_flags,
    CPPPATH=inc_paths,
    CCFLAGS=c_flags,
    LINKSCRIPT=File("STM32F103C8.ld"),
    LINKFLAGS=c_flags + link_flags,
)

uds_env = env.Clone()
uds_env.Append(
    CCFLAGS=[
        "-Wno-missing-prototypes",
        # "-Wno-float-equal",
        "-Wno-unused-parameter",
        "-DBYTE_ORDER=_BYTE_ORDER",
        "-DLITTLE_ENDIAN=_LITTLE_ENDIAN",
    ]
)

renderers = {
    "buildDefs": [File("renderers/BuildDefines_generated.h.mako")],
    "featureDefs": [File("#/shared/renderers/mako/FeatureDefines_generated.h.mako")],
}


def render_generated_files(options, renderer, output_dir):
    targets = []
    for template in renderer:
        renderer = Template(filename=template.abspath)
        rendered = renderer.render(**options)
        if not isinstance(rendered, str):
            raise Exception("Mako rendering didn't produce a str to write to the file")

        file = (
            output_dir.File(template.name)
            .target_from_source(prefix="", suffix="")
            .abspath
        )

        with open(file, "w") as out_fd:
            out_fd.write(rendered)

        targets.append(file)
    return targets


def make_build_target(variant_dir, file, ext):
    if isinstance(file, SCons.Node.FS.File):
        file = file.abspath
    file = file.replace(PROJECT_DIR.abspath + "/", "")
    if not PROJECT_DIR.abspath in file:
        file = file.replace(Dir("#").abspath + "/", "")
    return variant_dir.File(file).target_from_source(prefix="", suffix=ext)


configs = env.GenerateVariants(File("variants.yaml"), CONFIG_IDS)
elfs = []
binaries = []
binaries_crced = []
asms = []

for config_id, config in configs.items():
    config_env = env.Clone()
    feature_selections = []
    feature_selections += config["features"]["selections"]
    feature_selections_files = []
    for file in feature_selections:
        feature_selections_files += [ File(file) ]

    variant_dir = BUILDS_DIR.Dir(
        "_".join(config["description"].split(" ")) + f"_{config_id}"
    )
    generated_dir = variant_dir.Dir("generated")
    makedirs(generated_dir.abspath, exist_ok=True)

    features = {"features": config_env.GenerateFeatures(feature_selections_files, config["features"]["overrides"]) }
    generated_features = render_generated_files(features, renderers["featureDefs"], generated_dir)
    generated = render_generated_files(config["options"], renderers["buildDefs"], generated_dir)

    objs = []
    objs.extend(
        [
            config_env.Object(
                target=make_build_target(variant_dir, src, ".obj"),
                source=src,
                CPPPATH=inc_paths + [generated_dir],
            )
            for src in src_files
        ]
    )
    objs.extend(
        [
            uds_env.Object(
                target=make_build_target(variant_dir, src, ".obj"),
                source=src,
                CPPPATH=inc_paths + [generated_dir],
            )
            for src in uds_srcs
        ]
    )
    if features["features"]["defs"]["app_function_id"] == "function_id_blu":
        config_env["LINKSCRIPT"]=File("STM32F103C8-BLU.ld")
    elif features["features"]["defs"]["app_function_id"] == "function_id_bl":
        try:
            AddOption("--flashable-bootloader", dest="flashable-bootloader", action="store_true")
        except Exception:
            pass
        if GetOption("flashable-bootloader"):
            config_env["LINKSCRIPT"]=File("STM32F103C8-BLFLASHABLE.ld")

    # link all the compiled objects into an elf
    elf, map = config_env.Program(
        variant_dir.File(ARTIFACT_NAME + ".elf"),
        objs,
        MAPFILE=variant_dir.File(ARTIFACT_NAME + ".map"),
    )
    elfs.append(elf)
    Depends(elf, config_env["LINKSCRIPT"])
    Clean(elf, generated)

    # generate a binary
    binary = config_env.Bin(source=elf)
    binaries.append(binary)

    crc_env = config_env.Clone(tools=["hextools"])
    # generate the CRCd binary
    crc_binary = crc_env.InjectMpeg2CRC(source=binary, start_addr=features["features"]["defs"]["app_start_addr"])
    binaries_crced.append(crc_binary)
    Depends(crc_binary, binary)

    # asms target generates disassembled binaries
    asms.append(config_env.Asm(source=objs + [elf]))

    # build compilation database
    compile_db = config_env.CompilationDatabase(variant_dir.File("compile_commands.json"))
    Depends(compile_db, objs)
    # always generate compilation database
    Default(compile_db)
    # use compiledb alias to _only_ build the compiledb
    config_env.Alias("compiledb", compile_db)


Default(binaries_crced)
Alias("asms", asms)

# Return artifacts to the caller
artifacts = {}

if len(binaries) == 1:
    artifacts["FLASHABLE_ARTIFACT"] = {
        "artifact": binaries[0],
        "addr": APP_START_ADDR,
        "tools": ["st-flash"],
    }

if len(elfs) == 1:
    artifacts["DEBUG_ARTIFACT"] = {
        "artifact": elfs[0],
        "args": [],
        "tools": ["gcc-arm-none-eabi", "openocd"],
        "env": {
            "OPENOCD_INTERFACE": "stlink",
            "OPENOCD_MCU": "stm32f103c8",
        },
    }

Return("artifacts")
