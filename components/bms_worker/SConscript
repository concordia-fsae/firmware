#!/usr/bin/python3

from typing import List, Optional, Tuple, Union

from SCons.Node import FS
from SCons.Script import Default, Depends, Dir, GetOption, Import, Return

Import("GlobalEnv")

RTOS_DIR = Dir("RTOS")
SRC_DIR = Dir("src")
HW_DIR = Dir("HW")
PROJECT_LIB_DIR = Dir("lib")
LIBS_DIR = Dir("#/embedded/libs")
FREERTOS_DIR = LIBS_DIR.Dir("FreeRTOS")
CMSIS_DIR = LIBS_DIR.Dir("CMSIS")
CELLS_DIR = Dir("cells")
THERMS_DIR = Dir("thermistors")

BUILD_DIR = Dir("build")

APP_START_ADDR = 0x08000000

env = GlobalEnv.Clone(
    tools=[
        "gcc-arm-none-eabi",
        "chip_config",
        "st-flash",
        "openocd",
        "compilation_db",
        # "doxygen",
    ]
)
rtos_env = GlobalEnv.Clone(tools=["gcc-arm-none-eabi"])

env["OPENOCD_INTERFACE"] = "stlink"
env["OPENOCD_MCU"] = "stm32f103c8"

common_flags = [
    "-mthumb",
    "-mcpu=cortex-m3",
]

debug_flags = [
    "-ggdb3",
    "-g3",
    "-Og",
]

release_flags = [
    "-O2",
]

if GetOption("release"):
    common_flags += release_flags
else:
    common_flags += debug_flags

link_flags = [
    "-Wl,--gc-sections",
    "-Wl,--relax",
    "-Wl,--print-memory-usage",
    f"-Wl,-Map={BUILD_DIR.File('bms_worker.map').path}",
    # "-Wl,--print-gc-sections",
    "--specs=nano.specs",
]

as_flags = ["-xassembler-with-cpp"]

c_flags = [
    "-std=gnu17",
    "-ffunction-sections",
    "-fdata-sections",
    "-fshort-enums",
    "-funsigned-char",
    "-nostdlib",
    "-msoft-float",
    "-DSTM32F1",
    "-DSTM32F103xB",
    "-DUSE_HAL_DRIVER",
    "-DBMSW_BOARD_VA3",
    "-Wall",
    "-Wextra",
    "-Werror",
    "-Wfloat-equal",
    "-Wcast-align",
    "-Wlogical-op",
    "-Winline",
    "-Wshadow",
    "-Winit-self",
    "-Wmissing-prototypes",
    "-Wunused-function",
    "-Wpointer-arith",
    "-Wno-type-limits",
    "-Wno-unused-local-typedefs",
]

free_rtos_flags = [
    "-Wno-missing-prototypes",
    "-Wno-cast-align",
]

chip_config = env.ChipConfig(config_file="HW/mcuConfig.yaml")
c_flags.extend(chip_config.get("defines", []))


RTOS_INCLUDE_DIRS = [
    RTOS_DIR.Dir("include"),
    FREERTOS_DIR.Dir("Source/include/"),
    FREERTOS_DIR.Dir("Source/portable/GCC/ARM_CM3/"),
    CMSIS_DIR.Dir("CMSIS/Core/Include/"),
]

DRIVERS_INCLUDE_DIRS = [
    chip_config["cmsis_includes"],
    chip_config["hal_includes"],
]

LIBS_INCLUDE_DIRS = [
    LIBS_DIR.Dir("printf"),
    LIBS_DIR.Dir("atomic"),
]

PROJECT_INCLUDE_DIRS = [
    "include/",
    "HW/include/",
    "generated/",
    "cells/",
    "thermistors/",
]

paths = (
    RTOS_INCLUDE_DIRS + DRIVERS_INCLUDE_DIRS + PROJECT_INCLUDE_DIRS + LIBS_INCLUDE_DIRS
)

env.Append(
    ASFLAGS=as_flags,
    CPPPATH=paths,
    CCFLAGS=common_flags + c_flags,
    LINKSCRIPT=chip_config["linker_file"],
    LINKFLAGS=link_flags + common_flags,
)

rtos_env.Append(
    CPPPATH=paths,
    CCFLAGS=common_flags + c_flags + free_rtos_flags,
)

# List of component C files

project_source_files = [
    SRC_DIR.File("SystemManager.c"),
    SRC_DIR.File("Module.c"),
    SRC_DIR.File("CAN/CANIO-tx.c"),
    SRC_DIR.File("CAN/CANIO-rx.c"),
    SRC_DIR.File("IO.c"),
    SRC_DIR.File("Cooling.c"),
    SRC_DIR.File("Environment.c"),
    SRC_DIR.File("BatteryMonitoring.c"),
    SRC_DIR.File("Sys.c"),
    SRC_DIR.File("Utility.c"),
    CELLS_DIR.File("P42A.c"),
    THERMS_DIR.File("THERMISTORS.c"),
    THERMS_DIR.File("NCP21XV103J03RA.c"),
    THERMS_DIR.File("MF52C1103F3380.c"),
]

project_hw_files = [
    HW_DIR.File("HW.c"),
    HW_DIR.File("HW_adc.c"),
    HW_DIR.File("HW_can.c"),
    HW_DIR.File("HW_dma.c"),
    HW_DIR.File("HW_gpio.c"),
    HW_DIR.File("HW_i2c.c"),
    HW_DIR.File("HW_intc.c"),
    HW_DIR.File("HW_msp.c"),
    HW_DIR.File("HW_spi.c"),
    HW_DIR.File("HW_tim.c"),
    HW_DIR.File("HW_Fans.c"),
    HW_DIR.File("HW_HS4011.c"),
    HW_DIR.File("HW_MAX14921.c"),
    HW_DIR.File("HW_LTC2983.c"),
    HW_DIR.File("HW_SHT40.c"),
    HW_DIR.File("HW_NX3L4051PW.c"),
]

project_source_files += project_hw_files

rtos_source_files = [
    RTOS_DIR.File("FreeRTOSResources.c"),
    RTOS_DIR.File("FreeRTOS_SWI.c"),
    FREERTOS_DIR.File("Source/croutine.c"),
    FREERTOS_DIR.File("Source/event_groups.c"),
    FREERTOS_DIR.File("Source/list.c"),
    FREERTOS_DIR.File("Source/queue.c"),
    FREERTOS_DIR.File("Source/tasks.c"),
    FREERTOS_DIR.File("Source/timers.c"),
    FREERTOS_DIR.File("Source/portable/GCC/ARM_CM3/port.c"),
    # FREERTOS_DIR.File("Source/stream_buffer.c"),
    # FREERTOS_DIR.File("Source/portable/MemMang/heap_4.c"),
]

platform_source_files = []
# add driver source files
platform_source_files.extend(
    [(src[0], src[1] + ["-Wno-inline"]) for src in chip_config["sources"]]
)


def create_output_file_path(
    file: FS.File, new_ext: str, target_dir: Optional[str] = None
) -> str:
    fn = file.target_from_source(prefix="", suffix=new_ext).name

    if target_dir:
        return BUILD_DIR.Dir(target_dir).File(fn)

    return BUILD_DIR.Dir("/".join(file.path.split("/")[2:-1]) + "/").File(fn)


def compile_objects(
    env,
    files: List[Union[FS.File, Tuple[FS.File, List[str]]]],
    target_dir: Optional[str] = None,
) -> List[FS.File]:
    objs = []
    flags = env["CCFLAGS"]
    for src in files:
        if isinstance(src, tuple):
            src_file = src[0]
            these_flags = flags + src[1]
        elif isinstance(src, FS.File):
            src_file = src
            these_flags = flags
        else:
            raise Exception(
                "Source file should either be a 'File' \
                object or a tuple of a 'File' and a list of extra flags to compile with"
            )

        target = create_output_file_path(src_file, ".obj", target_dir)
        objs.append(env.Object(target=target, source=src_file, CCFLAGS=these_flags))
    return objs


## actually compile stuff

objs = []  # store objects here

# compile platform files
objs.extend(compile_objects(env, platform_source_files, target_dir="embedded/"))

# compile rtos source files
objs.extend(compile_objects(rtos_env, rtos_source_files, target_dir="FreeRTOS/"))

# compile project source files
objs.extend(compile_objects(env, project_source_files))

# link all the compiled objects into an elf
elf = env.Program(BUILD_DIR.File("bms_worker.elf"), objs)
Depends(elf, env["LINKSCRIPT"])

# generate a binary for flashing
binary = env.Bin(source=elf)
Default(binary)

# build doxygen files for this component
# env.Alias("docs", env.Doxygen("doxygen_stw.conf"))
# env.Depends("docs", project_source_files)
# env.Clean("docs", Dir("docs"))

# Generate compile_commands.json
compile_db = env.CompilationDatabase(BUILD_DIR.File("compile_commands.json"))
Depends(compile_db, objs)
# generate it by default
Default(compile_db)
# add an alias to _only_ generate the compilation database
env.Alias("compiledb", compile_db)


# Return artifacts to the caller
artifacts = {
    "FLASHABLE_ARTIFACT": {
        "artifact": binary,
        "addr": APP_START_ADDR,
        "tools": ["st-flash"],
    },
    "DEBUG_ARTIFACT": {
        "artifact": elf,
        "args": [],
        "tools": ["gcc-arm-none-eabi", "openocd"],
        "env": {
            "OPENOCD_INTERFACE": "stlink",
            "OPENOCD_MCU": "stm32f103c8",
        },
    },
}

Return("artifacts")
