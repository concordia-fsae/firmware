newlines                          = lf       # lf/crlf/cr/auto
code_width                        = 0
ls_func_split_full                = true
ls_for_split_full                 = true


disable_processing_cmt            = "*FORMAT-OFF*"
enable_processing_cmt             = "*FORMAT-ON*"


indent_with_tabs                  = 0         # 1=indent with tabs, 2=indent to level only
input_tab_size                    = 4         # original tab size
output_tab_size                   = 4         # new tab size
indent_columns                    = output_tab_size


indent_access_spec                = 4         # > 0, absolute column starting from 1, < 0 subtract from brace level
indent_access_spec_body           = true
indent_align_string               = true      # align broken strings
indent_brace                      = 0
indent_extern                     = true
indent_label                      = 4         # pos: absolute col, neg: relative column
indent_namespace                  = false
indent_namespace_level            = 0
indent_switch_case                = 4
indent_switch_body                = 4
indent_constr_colon               = true
indent_ctor_init                  = 4
indent_class                      = true


nl_if_brace                       = add       # "if () {" vs "if () \n {"
nl_else_brace                     = add       # "else {" vs "else \n {"
nl_brace_else                     = add
nl_struct_brace                   = add       # "struct {" vs "struct \n {"
nl_enum_brace                     = add       # "enum {" vs "enum \n {"
nl_union_brace                    = add       # "union {" vs "union \n {"
nl_for_brace                      = add       # "for () {" vs "for () \n {"
nl_do_brace                       = add       # "do {" vs "do \n {"
nl_while_brace                    = add       # "while () {" vs "while () \n {"
nl_brace_while                    = remove
nl_switch_brace                   = add       # "switch () {" vs "switch () \n {"
nl_namespace_brace                = ignore
nl_fcall_brace                    = add       # "foo() {" vs "foo()\n{"
nl_fdef_brace                     = add       # "int foo() {" vs "int foo()\n{"
nl_template_class                 = force
nl_class_brace                    = force
nl_collapse_empty_body            = true
nl_squeeze_ifdef                  = true
nl_after_return                   = true
nl_var_def_blk_end_func_top       = 1
nl_before_case                    = 1
nl_after_class                    = 2
nl_multi_line_sparen_open         = remove
nl_multi_line_sparen_close        = force
nl_brace_struct_var               = remove
nl_ds_struct_enum_close_brace     = true
# nl_create_func_def_one_liner      = true
nl_func_leave_one_liners          = true
nl_getset_leave_one_liners        = true

nl_max                            = 3        # unsigned number
nl_max_blank_in_func              = 3        # unsigned number

mod_paren_on_return               = ignore    # "return 1;" vs "return (1);"
mod_enum_last_comma               = force
mod_remove_duplicate_include      = true

mod_full_brace_if                 = force     # "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_if_chain_only      = true
mod_full_brace_for                = force     # "for () a--;" vs "for () { a--; }"
mod_full_brace_do                 = force     # "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while              = force     # "while (a) a--;" vs "while (a) { a--; }"
mod_full_brace_nl                 = 2

mod_full_paren_if_bool            = true
mod_full_paren_assign_bool        = true
mod_full_paren_return_bool        = true

mod_add_long_ifdef_endif_comment  = 10
mod_add_long_ifdef_else_comment   = 10

mod_sort_import                   = true
mod_sort_include                  = true


sp_before_semi                    = remove
sp_paren_paren                    = remove    # space between (( and ))
sp_return_paren                   = remove    # "return (1);" vs "return(1);"
sp_sizeof_paren                   = remove    # "sizeof (int)" vs "sizeof(int)"
sp_before_sparen                  = force     # "if (" vs "if("
sp_after_sparen                   = force     # "if () {" vs "if (){"
sp_after_cast                     = remove    # "(int) a" vs "(int)a"
sp_inside_braces                  = force     # "{ 1 }" vs "{1}"
sp_inside_braces_struct           = force     # "{ 1 }" vs "{1}"
sp_inside_braces_enum             = force     # "{ 1 }" vs "{1}"
sp_inside_paren                   = remove
sp_inside_fparen                  = remove
sp_inside_sparen                  = remove
sp_inside_for                     = remove
# sp_type_func                     = ignore
sp_assign                         = force
sp_arith                          = force
sp_bool                           = force
sp_compare                        = force
sp_endif_cmt                      = force
sp_after_comma                    = force
sp_func_def_paren                 = remove    # "int foo (){" vs "int foo(){"
sp_func_call_paren                = remove    # "foo (" vs "foo("
sp_func_proto_paren               = remove    # "int foo ();" vs "int foo();"
sp_cmt_cpp_start                  = force     # //cmt vs. // cmt
sp_before_constr_colon            = force
sp_after_constr_colon             = force

sp_before_emb_cmt                 = force
sp_num_before_emb_cmt             = 4
sp_before_tr_cmt                  = force
sp_num_before_tr_cmt              = 4

sp_cmt_cpp_lint                   = true     # don't add a space at the beginning of comments that start with `lint` (i.e. //lint ...)

align_right_cmt_span              = 3
align_right_cmt_gap               = 0
align_right_cmt_same_level        = true


align_with_tabs                   = false     # use tabs to align
align_on_tabstop                  = false

align_enum_equ_span               = 3

align_nl_cont                     = 1
align_number_right                = true
align_assign_span                 = 3

align_func_params                 = true
align_func_params_span            = 1
align_func_params_thresh          = 0
align_func_params_gap             = 0
align_func_proto_span             = 3

align_single_line_func            = true
align_single_line_brace           = true

align_same_func_call_params       = true
align_same_func_call_params_span  = 2

align_var_def_attribute           = true
align_var_def_span                = 3
align_var_def_inline              = true
align_var_def_star_style          = 1
align_var_def_colon               = true
align_var_def_colon_gap           = 0

align_var_struct_span             = 3
align_var_struct_gap              = 1
align_var_struct_thresh           = 0
align_var_class_span              = 3
align_struct_init_span            = 3

align_typedef_span                = 3
align_typedef_gap                 = 1

align_pp_define_span              = 3
align_pp_define_gap               = 4
align_pp_define_together          = true


pp_indent                         = remove
pp_indent_at_level                = false
pp_indent_count                   = 1
pp_space_after                    = force
pp_space_count                    = 1

eat_blanks_after_open_brace       = true
eat_blanks_before_close_brace     = true

cmt_star_cont                     = true
cmt_trailing_single_line_c_to_cpp = true
cmt_multi_check_last              = false
cmt_c_nl_start                    = true
cmt_c_nl_end                      = true
